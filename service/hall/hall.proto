syntax = "proto3";

option go_package = "./hall_grpc";
package hall_grpc;

service Hall {
    // 顶号下线
    rpc UserInstead (UserInsteadRequest) returns (UserInsteadResponse) {}
    // rpc PushStream (stream PushStreamNotify) returns (PushStreamPush) {}
    rpc MustPush (MustPushRequest) returns (MustPushResponse) {}
    // 转发client消息
    rpc ClientStream (stream ClientMessageNotify) returns (stream ClientMessagePush){}
    // 网关消息交互
    rpc GateStream (stream GateStreamNotify) returns (stream GateStreamPush){}
    // 状态
    rpc Info (InfoRequest) returns (InfoResponse) {}
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
    rpc Kick(KickRequest) returns (KickResponse) {}
}

message GateStreamNotify {
}

message GateStreamPush {
}

message HeartbeatRequest {
}

message HeartbeatResponse {
    int64 PlayerCount = 1;
}

message InfoRequest {
}

message InfoResponse {
    int64 BuildTime = 1;
    string BuildVersion = 2;
    // 在线人数
    int64 SessionCount = 3;
}

message ClientMessageNotify {
    string MemberId = 1;
    uint64 SessionId = 2;
    uint64 ReqId = 3;
    bytes Data = 4;
}

message ClientMessagePush {
    PacketType Type = 1;
    uint64 SessionId = 2;
    uint64 ReqId = 3;
    bytes Data = 4;
    string Route = 5;
}

// 顶号下线
message UserInsteadRequest {
    string UserId = 1;
    string Address = 2;
}

// 顶号下线
message UserInsteadResponse {
    int32 ErrorCode = 1;
    string ErrorMsg = 2;
}

// 推送消息
// message PushStreamNotify {
//     string UserId = 1;
//     bytes Data = 4;
// }

// 推送消息
// message PushStreamPush {
//     int32 ErrorCode = 1;
//     string ErrorMsg = 2;
// }

// 推送消息
message MustPushRequest {
    string UserId = 1;
    bytes Data = 4;
}

// 推送消息
message MustPushResponse {
    int32 ErrorCode = 1;
    string ErrorMsg = 2;
}

enum PacketType {
    NONE = 0;
    DATA = 1;
    KICK = 5;
    USER_INSTEAD = 8;
}

message KickRequest {
    string UserId = 1;
    string Reason = 2;
}

message KickResponse {
    int32 ErrorCode = 1;
    string ErrorMsg = 2;
}