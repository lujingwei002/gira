// Code generated by protoc-gen-go-gclient. DO NOT EDIT.
// versions:
// - protoc-gen-go-gclient v1.3.0
// - protoc             v3.12.4
// source: service/admin/admin.proto

package admin_grpc

import (
	context "context"
	fmt "fmt"
	gira "github.com/lujingwei002/gira"
	errors "github.com/lujingwei002/gira/errors"
	facade "github.com/lujingwei002/gira/facade"
	service_options "github.com/lujingwei002/gira/options/service_options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	sync "sync"
	time "time"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

type ReloadResourceResponse_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse
}

func (r *ReloadResourceResponse_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse_MulticastResult) Response(index int) *ReloadResourceResponse {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type ReloadResourceResponse1_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse1
}

func (r *ReloadResourceResponse1_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse1_MulticastResult) Response(index int) *ReloadResourceResponse1 {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse1_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse1_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse1_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse1_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse1_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse1_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type ReloadResourceResponse2_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse2
}

func (r *ReloadResourceResponse2_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse2_MulticastResult) Response(index int) *ReloadResourceResponse2 {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse2_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse2_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse2_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse2_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse2_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse2_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

const (
	AdminServerName = "admin_grpc.Admin"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClients interface {
	WithServiceName(serviceName string) AdminClients
	Local() AdminClientsLocal
	Unicast() AdminClientsUnicast
	Multicast(count int) AdminClientsMulticast
	Broadcast() AdminClientsMulticast

	ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type AdminClientsMulticast interface {
	WhereRegex(regex string) AdminClientsMulticast
	WherePrefix(prefix bool) AdminClientsMulticast
	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse_MulticastResult, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource1Client_MulticastResult, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (*Admin_ReloadResource2Client_MulticastResult, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource3Client_MulticastResult, error)
}

type AdminClientsUnicast interface {
	Where(serviceName string) AdminClientsUnicast
	WherePeer(peer *gira.Peer) AdminClientsUnicast
	WherePeerFullName(appFullName string) AdminClientsUnicast
	WhereAddress(address string) AdminClientsUnicast
	WhereUser(userId string) AdminClientsUnicast

	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type AdminClientsLocal interface {
	WhereUser(userId string) AdminClientsLocal
	WithTimeout(timeout int64) AdminClientsLocal

	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type adminClients struct {
	mu          sync.Mutex
	clientPool  map[string]*sync.Pool
	serviceName string
}

func NewAdminClients() AdminClients {
	return &adminClients{
		serviceName: AdminServerName,
		clientPool:  make(map[string]*sync.Pool, 0),
	}
}

var DefaultAdminClients = NewAdminClients()

func (c *adminClients) getClient(address string) (AdminClient, error) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; !ok {
		pool = &sync.Pool{
			New: func() any {
				conn, err := grpc.Dial(address, grpc.WithInsecure())
				if err != nil {
					return err
				}
				client := NewAdminClient(conn)
				return client
			},
		}
		c.clientPool[address] = pool
		c.mu.Unlock()
	} else {
		c.mu.Unlock()
	}
	if v := pool.Get(); v == nil {
		return nil, errors.ErrGrpcClientPoolNil
	} else if err, ok := v.(error); ok {
		return nil, err
	} else {
		return v.(AdminClient), nil
	}
}

func (c *adminClients) putClient(address string, client AdminClient) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; ok {
		pool.Put(client)
	}
	c.mu.Unlock()
}

func (c *adminClients) WithServiceName(serviceName string) AdminClients {
	c.serviceName = serviceName
	return c
}

func (c *adminClients) Local() AdminClientsLocal {
	headers := make(map[string]string)
	u := &adminClientsLocal{
		timeout: 5,
		headers: metadata.New(headers),
		client:  c,
	}
	return u
}

func (c *adminClients) Unicast() AdminClientsUnicast {
	headers := make(map[string]string)
	u := &adminClientsUnicast{
		headers: metadata.New(headers),
		client:  c,
	}
	return u
}

func (c *adminClients) Multicast(count int) AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       count,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) Broadcast() AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       -1,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsLocal struct {
	timeout int64
	userId  string
	client  *adminClients
	headers metadata.MD
}

func (c *adminClientsLocal) WhereUser(userId string) AdminClientsLocal {
	c.userId = userId
	c.headers.Append(gira.GRPC_PATH_KEY, userId)
	return c
}

func (c *adminClientsLocal) WithTimeout(timeout int64) AdminClientsLocal {
	c.timeout = timeout
	return c
}

func (c *adminClientsLocal) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	cancelCtx, cancelFunc := context.WithTimeout(ctx, time.Second*time.Duration(c.timeout))
	defer cancelFunc()
	if c.headers.Len() > 0 {
		cancelCtx = metadata.NewOutgoingContext(cancelCtx, c.headers)
	}
	if s, ok := facade.WhereIsServer(c.client.serviceName); !ok {
		return nil, errors.ErrServerNotFound
	} else if svr, ok := s.(AdminServer); !ok {
		return nil, errors.ErrServerNotFound
	} else {
		return svr.ReloadResource(cancelCtx, in)
	}
}

func (c *adminClientsLocal) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadResource1 not implemented")
}

func (c *adminClientsLocal) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadResource2 not implemented")
}

func (c *adminClientsLocal) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadResource3 not implemented")
}

type adminClientsUnicast struct {
	peer         *gira.Peer
	peerFullName string
	serviceName  string
	address      string
	userId       string
	client       *adminClients
	headers      metadata.MD
}

func (c *adminClientsUnicast) Where(serviceName string) AdminClientsUnicast {
	c.serviceName = serviceName
	return c
}

func (c *adminClientsUnicast) WherePeer(peer *gira.Peer) AdminClientsUnicast {
	c.peer = peer
	return c
}

func (c *adminClientsUnicast) WherePeerFullName(peerFullName string) AdminClientsUnicast {
	c.peerFullName = peerFullName
	return c
}

func (c *adminClientsUnicast) WhereAddress(address string) AdminClientsUnicast {
	c.address = address
	return c
}

func (c *adminClientsUnicast) WhereUser(userId string) AdminClientsUnicast {
	c.userId = userId
	c.headers.Append(gira.GRPC_PATH_KEY, userId)
	return c
}

func (c *adminClientsUnicast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if len(c.peerFullName) > 0 {
		if peer, err := facade.WhereIsPeer(c.peerFullName); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	} else if c.peer != nil && facade.IsEnableResolver() {
		address = c.peer.Url
	} else if c.peer != nil {
		address = c.peer.Address
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsServiceName(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, errors.ErrPeerNotFound
		} else if facade.IsEnableResolver() {
			address = peers[0].Url
		} else {
			address = peers[0].Address
		}
	} else if len(c.userId) > 0 {
		if peer, err := facade.WhereIsUser(c.userId); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	}
	if len(address) <= 0 {
		return nil, errors.ErrPeerNotFound
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	if c.headers.Len() > 0 {
		ctx = metadata.NewOutgoingContext(ctx, c.headers)
	}
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if len(c.peerFullName) > 0 {
		if peer, err := facade.WhereIsPeer(c.peerFullName); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	} else if c.peer != nil && facade.IsEnableResolver() {
		address = c.peer.Url
	} else if c.peer != nil {
		address = c.peer.Address
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsServiceName(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, errors.ErrPeerNotFound
		} else if facade.IsEnableResolver() {
			address = peers[0].Url
		} else {
			address = peers[0].Address
		}
	} else if len(c.userId) > 0 {
		if peer, err := facade.WhereIsUser(c.userId); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	}
	if len(address) <= 0 {
		return nil, errors.ErrPeerNotFound
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	if c.headers.Len() > 0 {
		ctx = metadata.NewOutgoingContext(ctx, c.headers)
	}
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if len(c.peerFullName) > 0 {
		if peer, err := facade.WhereIsPeer(c.peerFullName); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	} else if c.peer != nil && facade.IsEnableResolver() {
		address = c.peer.Url
	} else if c.peer != nil {
		address = c.peer.Address
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsServiceName(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, errors.ErrPeerNotFound
		} else if facade.IsEnableResolver() {
			address = peers[0].Url
		} else {
			address = peers[0].Address
		}
	} else if len(c.userId) > 0 {
		if peer, err := facade.WhereIsUser(c.userId); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	}
	if len(address) <= 0 {
		return nil, errors.ErrPeerNotFound
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	if c.headers.Len() > 0 {
		ctx = metadata.NewOutgoingContext(ctx, c.headers)
	}
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if len(c.peerFullName) > 0 {
		if peer, err := facade.WhereIsPeer(c.peerFullName); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	} else if c.peer != nil && facade.IsEnableResolver() {
		address = c.peer.Url
	} else if c.peer != nil {
		address = c.peer.Address
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsServiceName(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, errors.ErrPeerNotFound
		} else if facade.IsEnableResolver() {
			address = peers[0].Url
		} else {
			address = peers[0].Address
		}
	} else if len(c.userId) > 0 {
		if peer, err := facade.WhereIsUser(c.userId); err != nil {
			return nil, err
		} else if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
	}
	if len(address) <= 0 {
		return nil, errors.ErrPeerNotFound
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	if c.headers.Len() > 0 {
		ctx = metadata.NewOutgoingContext(ctx, c.headers)
	}
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsMulticast struct {
	count       int
	serviceName string
	regex       string
	prefix      bool
	client      *adminClients
}

type Admin_ReloadResource1Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource1Client
}

func (r *Admin_ReloadResource1Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource1Client_MulticastResult) Response(index int) Admin_ReloadResource1Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource1Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource1Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource1Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type Admin_ReloadResource2Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource2Client
}

func (r *Admin_ReloadResource2Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource2Client_MulticastResult) Response(index int) Admin_ReloadResource2Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource2Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource2Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource2Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type Admin_ReloadResource3Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource3Client
}

func (r *Admin_ReloadResource3Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource3Client_MulticastResult) Response(index int) Admin_ReloadResource3Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource3Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource3Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource3Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}
func (c *adminClientsMulticast) WhereRegex(regex string) AdminClientsMulticast {
	c.regex = regex
	return c
}

func (c *adminClientsMulticast) WherePrefix(prefix bool) AdminClientsMulticast {
	c.prefix = prefix
	return c
}

func (c *adminClientsMulticast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []service_options.WhereOption
	// 多播
	whereOpts = append(whereOpts, service_options.WithWhereCatalogOption())
	if c.count > 0 {
		whereOpts = append(whereOpts, service_options.WithWhereMaxCountOption(c.count))
	}
	serviceName := c.serviceName
	if len(c.regex) > 0 {
		serviceName = fmt.Sprintf("%s%s", c.serviceName, c.regex)
		whereOpts = append(whereOpts, service_options.WithWhereRegexOption())
	}
	if c.prefix {
		whereOpts = append(whereOpts, service_options.WithWherePrefixOption())
	}
	peers, err := facade.WhereIsServiceName(serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &ReloadResourceResponse_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		var address string
		if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
		client, err := c.client.getClient(address)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource(ctx, in, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(address, client)
			continue
		}
		c.client.putClient(address, client)
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource1Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []service_options.WhereOption
	// 多播
	whereOpts = append(whereOpts, service_options.WithWhereCatalogOption())
	if c.count > 0 {
		whereOpts = append(whereOpts, service_options.WithWhereMaxCountOption(c.count))
	}
	serviceName := c.serviceName
	if len(c.regex) > 0 {
		serviceName = fmt.Sprintf("%s%s", c.serviceName, c.regex)
		whereOpts = append(whereOpts, service_options.WithWhereRegexOption())
	}
	if c.prefix {
		whereOpts = append(whereOpts, service_options.WithWherePrefixOption())
	}
	peers, err := facade.WhereIsServiceName(serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource1Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		var address string
		if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
		client, err := c.client.getClient(address)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource1(ctx, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(address, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (*Admin_ReloadResource2Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []service_options.WhereOption
	// 多播
	whereOpts = append(whereOpts, service_options.WithWhereCatalogOption())
	if c.count > 0 {
		whereOpts = append(whereOpts, service_options.WithWhereMaxCountOption(c.count))
	}
	serviceName := c.serviceName
	if len(c.regex) > 0 {
		serviceName = fmt.Sprintf("%s%s", c.serviceName, c.regex)
		whereOpts = append(whereOpts, service_options.WithWhereRegexOption())
	}
	if c.prefix {
		whereOpts = append(whereOpts, service_options.WithWherePrefixOption())
	}
	peers, err := facade.WhereIsServiceName(serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource2Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		var address string
		if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
		client, err := c.client.getClient(address)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource2(ctx, in, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(address, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource3Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []service_options.WhereOption
	// 多播
	whereOpts = append(whereOpts, service_options.WithWhereCatalogOption())
	if c.count > 0 {
		whereOpts = append(whereOpts, service_options.WithWhereMaxCountOption(c.count))
	}
	serviceName := c.serviceName
	if len(c.regex) > 0 {
		serviceName = fmt.Sprintf("%s%s", c.serviceName, c.regex)
		whereOpts = append(whereOpts, service_options.WithWhereRegexOption())
	}
	if c.prefix {
		whereOpts = append(whereOpts, service_options.WithWherePrefixOption())
	}
	peers, err := facade.WhereIsServiceName(serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource3Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		var address string
		if facade.IsEnableResolver() {
			address = peer.Url
		} else {
			address = peer.Address
		}
		client, err := c.client.getClient(address)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource3(ctx, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(address, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}
