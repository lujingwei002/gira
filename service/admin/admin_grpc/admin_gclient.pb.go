// Code generated by protoc-gen-go-gclient. DO NOT EDIT.
// versions:
// - protoc-gen-go-gclient v1.3.0
// - protoc             v3.12.4
// source: service/admin/admin.proto

package admin_grpc

import (
	context "context"
	fmt "fmt"
	gira "github.com/lujingwei002/gira"
	facade "github.com/lujingwei002/gira/facade"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminServiceName = "admin_grpc.Admin"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClients interface {
	WithServiceName(serviceName string) AdminClients
	WithUnicast() AdminClientsUnicast
	WithMulticast(count int) AdminClientsMulticast
	WithBroadcast() AdminClientsMulticast

	ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type AdminClientsMulticast interface {
	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) ([]*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) ([]Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) ([]Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) ([]Admin_ReloadResource3Client, error)
}

type AdminClientsUnicast interface {
	WithServiceName(serviceName string) AdminClientsUnicast
	WithPeer(peer *gira.Peer) AdminClientsUnicast
	WithAddress(address string) AdminClientsUnicast

	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type adminClients struct {
	mu          sync.Mutex
	clientPool  map[string]*sync.Pool
	serviceName string
}

func NewAdminClients(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClients) getClient(address string) (AdminClient, error) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; !ok {
		pool = &sync.Pool{
			New: func() any {
				conn, err := grpc.Dial(address, grpc.WithInsecure())
				if err != nil {
					return err
				}
				client := NewAdminClient(conn)
				return client
			},
		}
		c.clientPool[address] = pool
		c.mu.Unlock()
	} else {
		c.mu.Unlock()
	}
	if v := pool.Get(); v == nil {
		return nil, gira.ErrGrpcClientPoolNil
	} else if err, ok := v.(error); ok {
		return nil, err
	} else {
		return v.(AdminClient), nil
	}
}

func (c *adminClients) WithServiceName(serviceName string) AdminClients {
	c.serviceName = serviceName
	return c
}

func (c *adminClients) WithUnicast() AdminClientsUnicast {
	u := &adminClientsUnicast{
		client: c,
	}
	return u
}

func (c *adminClients) WithMulticast(count int) AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       count,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) WithBroadcast() AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       -1,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsUnicast struct {
	peer        *gira.Peer
	serviceName string
	address     string
	client      *adminClients
}

func (c *adminClientsUnicast) WithServiceName(serviceName string) AdminClientsUnicast {
	c.serviceName = fmt.Sprintf("%s/%s", c.client.serviceName, serviceName)
	return c
}

func (c *adminClientsUnicast) WithPeer(peer *gira.Peer) AdminClientsUnicast {
	c.peer = peer
	return c
}

func (c *adminClientsUnicast) WithAddress(address string) AdminClientsUnicast {
	c.address = address
	return c
}

func (c *adminClientsUnicast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsMulticast struct {
	count       int
	serviceName string
	client      *adminClients
}

func (c *adminClientsMulticast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) ([]*ReloadResourceResponse, error) {
	var peers []*gira.Peer
	peers, err := facade.WhereIsService(c.serviceName)
	if err != nil {
		return nil, err
	}
	arr := make([]*ReloadResourceResponse, 0)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			continue
		}
		out, err := client.ReloadResource(ctx, in, opts...)
		if err != nil {
			continue
		}
		arr = append(arr, out)
	}
	return arr, nil
}

func (c *adminClientsMulticast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) ([]Admin_ReloadResource1Client, error) {
	var peers []*gira.Peer
	peers, err := facade.WhereIsService(c.serviceName)
	if err != nil {
		return nil, err
	}
	arr := make([]Admin_ReloadResource1Client, 0)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			continue
		}
		out, err := client.ReloadResource1(ctx, opts...)
		if err != nil {
			continue
		}
		arr = append(arr, out)
	}
	return arr, nil
}

func (c *adminClientsMulticast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) ([]Admin_ReloadResource2Client, error) {
	var peers []*gira.Peer
	peers, err := facade.WhereIsService(c.serviceName)
	if err != nil {
		return nil, err
	}
	arr := make([]Admin_ReloadResource2Client, 0)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			continue
		}
		out, err := client.ReloadResource2(ctx, in, opts...)
		if err != nil {
			continue
		}
		arr = append(arr, out)
	}
	return arr, nil
}

func (c *adminClientsMulticast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) ([]Admin_ReloadResource3Client, error) {
	var peers []*gira.Peer
	peers, err := facade.WhereIsService(c.serviceName)
	if err != nil {
		return nil, err
	}
	arr := make([]Admin_ReloadResource3Client, 0)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			continue
		}
		out, err := client.ReloadResource3(ctx, opts...)
		if err != nil {
			continue
		}
		arr = append(arr, out)
	}
	return arr, nil
}
