// Code generated by protoc-gen-go-gclient. DO NOT EDIT.
// versions:
// - protoc-gen-go-gclient v1.3.0
// - protoc             v3.12.4
// source: service/admin/admin.proto

package admin_grpc

import (
	context "context"
	fmt "fmt"
	gira "github.com/lujingwei002/gira"
	facade "github.com/lujingwei002/gira/facade"
	registry_options "github.com/lujingwei002/gira/options/registry_options"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

type ReloadResourceResponse1_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse1
}

func (r *ReloadResourceResponse1_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse1_MulticastResult) Response(index int) *ReloadResourceResponse1 {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse1_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse1_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse1_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse1_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse1_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse1_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type ReloadResourceResponse2_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse2
}

func (r *ReloadResourceResponse2_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse2_MulticastResult) Response(index int) *ReloadResourceResponse2 {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse2_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse2_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse2_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse2_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse2_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse2_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type ReloadResourceResponse_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []*ReloadResourceResponse
}

func (r *ReloadResourceResponse_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *ReloadResourceResponse_MulticastResult) Response(index int) *ReloadResourceResponse {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *ReloadResourceResponse_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *ReloadResourceResponse_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *ReloadResourceResponse_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *ReloadResourceResponse_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *ReloadResourceResponse_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *ReloadResourceResponse_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

const (
	AdminServiceName = "admin_grpc.Admin"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClients interface {
	WithServiceName(serviceName string) AdminClients
	WithUnicast() AdminClientsUnicast
	WithMulticast(count int) AdminClientsMulticast
	WithBroadcast() AdminClientsMulticast

	ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type AdminClientsMulticast interface {
	WithRegex(regex string) AdminClientsMulticast
	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse_MulticastResult, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource1Client_MulticastResult, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (*Admin_ReloadResource2Client_MulticastResult, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource3Client_MulticastResult, error)
}

type AdminClientsUnicast interface {
	WithServiceName(serviceName string) AdminClientsUnicast
	WithPeer(peer *gira.Peer) AdminClientsUnicast
	WithAddress(address string) AdminClientsUnicast

	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type adminClients struct {
	mu          sync.Mutex
	clientPool  map[string]*sync.Pool
	serviceName string
}

func NewAdminClients() AdminClients {
	return &adminClients{
		serviceName: AdminServiceName,
		clientPool:  make(map[string]*sync.Pool, 0),
	}
}

var DefaultAdminClients = NewAdminClients()

func (c *adminClients) getClient(address string) (AdminClient, error) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; !ok {
		pool = &sync.Pool{
			New: func() any {
				conn, err := grpc.Dial(address, grpc.WithInsecure())
				if err != nil {
					return err
				}
				client := NewAdminClient(conn)
				return client
			},
		}
		c.clientPool[address] = pool
		c.mu.Unlock()
	} else {
		c.mu.Unlock()
	}
	if v := pool.Get(); v == nil {
		return nil, gira.ErrGrpcClientPoolNil
	} else if err, ok := v.(error); ok {
		return nil, err
	} else {
		return v.(AdminClient), nil
	}
}

func (c *adminClients) putClient(address string, client AdminClient) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; ok {
		pool.Put(client)
	}
	c.mu.Unlock()
}

func (c *adminClients) WithServiceName(serviceName string) AdminClients {
	c.serviceName = serviceName
	return c
}

func (c *adminClients) WithUnicast() AdminClientsUnicast {
	u := &adminClientsUnicast{
		client: c,
	}
	return u
}

func (c *adminClients) WithMulticast(count int) AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       count,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) WithBroadcast() AdminClientsMulticast {
	u := &adminClientsMulticast{
		count:       -1,
		serviceName: fmt.Sprintf("%s/", c.serviceName),
		client:      c,
	}
	return u
}

func (c *adminClients) ReloadResource(ctx context.Context, address string, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource1(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource2(ctx context.Context, address string, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource3(ctx context.Context, address string, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	client, err := c.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.putClient(address, client)
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsUnicast struct {
	peer        *gira.Peer
	serviceName string
	address     string
	client      *adminClients
}

func (c *adminClientsUnicast) WithServiceName(serviceName string) AdminClientsUnicast {
	u := &adminClientsUnicast{
		client:      c.client,
		serviceName: fmt.Sprintf("%s/%s", c.client.serviceName, serviceName),
	}
	return u
}

func (c *adminClientsUnicast) WithPeer(peer *gira.Peer) AdminClientsUnicast {
	u := &adminClientsUnicast{
		client: c.client,
		peer:   peer,
	}
	return u
}

func (c *adminClientsUnicast) WithAddress(address string) AdminClientsUnicast {
	u := &adminClientsUnicast{
		client:  c.client,
		address: address,
	}
	return u
}

func (c *adminClientsUnicast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	out, err := client.ReloadResource2(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClientsUnicast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	var address string
	if len(c.address) > 0 {
		address = c.address
	} else if c.peer != nil {
		address = c.peer.GrpcAddr
	} else if len(c.serviceName) > 0 {
		if peers, err := facade.WhereIsService(c.serviceName); err != nil {
			return nil, err
		} else if len(peers) < 1 {
			return nil, gira.ErrPeerNotFound.Trace()
		} else {
			address = peers[0].GrpcAddr
		}
	}
	if len(address) <= 0 {
		return nil, gira.ErrInvalidArgs.Trace()
	}
	client, err := c.client.getClient(address)
	if err != nil {
		return nil, err
	}
	defer c.client.putClient(address, client)
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClientsMulticast struct {
	// 不变
	count       int
	serviceName string
	// 可变
	regex  string
	client *adminClients
}

type Admin_ReloadResource1Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource1Client
}

func (r *Admin_ReloadResource1Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource1Client_MulticastResult) Response(index int) Admin_ReloadResource1Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource1Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource1Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource1Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource1Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type Admin_ReloadResource2Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource2Client
}

func (r *Admin_ReloadResource2Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource2Client_MulticastResult) Response(index int) Admin_ReloadResource2Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource2Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource2Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource2Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource2Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}

type Admin_ReloadResource3Client_MulticastResult struct {
	errors       []error
	peerCount    int
	successPeers []*gira.Peer
	errorPeers   []*gira.Peer
	responses    []Admin_ReloadResource3Client
}

func (r *Admin_ReloadResource3Client_MulticastResult) Error() error {
	if len(r.errors) <= 0 {
		return nil
	}
	return r.errors[0]
}
func (r *Admin_ReloadResource3Client_MulticastResult) Response(index int) Admin_ReloadResource3Client {
	if index < 0 || index >= len(r.responses) {
		return nil
	}
	return r.responses[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) SuccessPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.successPeers) {
		return nil
	}
	return r.successPeers[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) ErrorPeer(index int) *gira.Peer {
	if index < 0 || index >= len(r.errorPeers) {
		return nil
	}
	return r.errorPeers[index]
}
func (r *Admin_ReloadResource3Client_MulticastResult) PeerCount() int {
	return r.peerCount
}
func (r *Admin_ReloadResource3Client_MulticastResult) SuccessCount() int {
	return len(r.successPeers)
}
func (r *Admin_ReloadResource3Client_MulticastResult) ErrorCount() int {
	return len(r.errorPeers)
}
func (r *Admin_ReloadResource3Client_MulticastResult) Errors(index int) error {
	if index < 0 || index >= len(r.errors) {
		return nil
	}
	return r.errors[index]
}
func (c *adminClientsMulticast) WithRegex(regex string) AdminClientsMulticast {
	u := &adminClientsMulticast{
		client: c.client,
		count:  c.count,
		regex:  regex,
	}
	return u
}

func (c *adminClientsMulticast) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []registry_options.WhereOption
	// 多播
	if c.count > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereMaxCountOption(c.count))
	}
	if len(c.regex) > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereRegexOption(c.regex))
	}
	peers, err := facade.WhereIsService(c.serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &ReloadResourceResponse_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource(ctx, in, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(peer.GrpcAddr, client)
			continue
		}
		c.client.putClient(peer.GrpcAddr, client)
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource1Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []registry_options.WhereOption
	// 多播
	if c.count > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereMaxCountOption(c.count))
	}
	if len(c.regex) > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereRegexOption(c.regex))
	}
	peers, err := facade.WhereIsService(c.serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource1Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource1(ctx, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(peer.GrpcAddr, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (*Admin_ReloadResource2Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []registry_options.WhereOption
	// 多播
	if c.count > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereMaxCountOption(c.count))
	}
	if len(c.regex) > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereRegexOption(c.regex))
	}
	peers, err := facade.WhereIsService(c.serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource2Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource2(ctx, in, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(peer.GrpcAddr, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}

func (c *adminClientsMulticast) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (*Admin_ReloadResource3Client_MulticastResult, error) {
	var peers []*gira.Peer
	var whereOpts []registry_options.WhereOption
	// 多播
	if c.count > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereMaxCountOption(c.count))
	}
	if len(c.regex) > 0 {
		whereOpts = append(whereOpts, registry_options.WithWhereRegexOption(c.regex))
	}
	peers, err := facade.WhereIsService(c.serviceName, whereOpts...)
	if err != nil {
		return nil, err
	}
	result := &Admin_ReloadResource3Client_MulticastResult{}
	result.peerCount = len(peers)
	for _, peer := range peers {
		client, err := c.client.getClient(peer.GrpcAddr)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			continue
		}
		out, err := client.ReloadResource3(ctx, opts...)
		if err != nil {
			result.errors = append(result.errors, err)
			result.errorPeers = append(result.errorPeers, peer)
			c.client.putClient(peer.GrpcAddr, client)
			continue
		}
		result.responses = append(result.responses, out)
		result.successPeers = append(result.successPeers, peer)
	}
	return result, nil
}
