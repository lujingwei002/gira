// Code generated by protoc-gen-go-gclient. DO NOT EDIT.
// versions:
// - protoc-gen-go-gclient v1.3.0
// - protoc             v3.12.4
// source: service/admin/admin.proto

package __admin_grpc

import (
	context "context"
	gira "github.com/lujingwei002/gira"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClients interface {
	ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error)
	ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error)
	ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error)
	ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error)
}

type adminClients struct {
	mu         sync.Mutex
	clientPool map[string]*sync.Pool
}

func NewAdminClients(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClients) getClient(address string) (AdminClient, error) {
	c.mu.Lock()
	var pool *sync.Pool
	var ok bool
	if pool, ok = c.clientPool[address]; !ok {
		pool = &sync.Pool{
			New: func() any {
				conn, err := grpc.Dial(address, grpc.WithInsecure())
				if err != nil {
					return err
				}
				client := NewAdminClient(conn)
				return client
			},
		}
		c.clientPool[address] = pool
		c.mu.Unlock()
	} else {
		c.mu.Unlock()
	}
	if v := pool.Get(); v == nil {
		return nil, gira.ErrGrpcClientPoolNil
	} else if err, ok := v.(error); ok {
		return nil, err
	} else {
		return v.(AdminClient), nil
	}
}

func (c *adminClients) ReloadResource(ctx context.Context, in *ReloadResourceRequest, opts ...grpc.CallOption) (*ReloadResourceResponse, error) {
	client, err := c.getClient()
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource(ctx, in, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource1(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource1Client, error) {
	client, err := c.getClient()
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource1(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource2(ctx context.Context, in *ReloadResourceRequest2, opts ...grpc.CallOption) (Admin_ReloadResource2Client, error) {
	client, err := c.getClient()
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource2(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClients) ReloadResource3(ctx context.Context, opts ...grpc.CallOption) (Admin_ReloadResource3Client, error) {
	client, err := c.getClient()
	if err != nil {
		return nil, err
	}
	out, err := client.ReloadResource3(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
