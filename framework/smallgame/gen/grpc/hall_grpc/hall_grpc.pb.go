// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: doc/grpc/hall.proto

package hall_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hall_UserInstead_FullMethodName  = "/hall_grpc.Hall/UserInstead"
	Hall_PushStream_FullMethodName   = "/hall_grpc.Hall/PushStream"
	Hall_MustPush_FullMethodName     = "/hall_grpc.Hall/MustPush"
	Hall_ClientStream_FullMethodName = "/hall_grpc.Hall/ClientStream"
	Hall_GateStream_FullMethodName   = "/hall_grpc.Hall/GateStream"
	Hall_Info_FullMethodName         = "/hall_grpc.Hall/Info"
	Hall_Heartbeat_FullMethodName    = "/hall_grpc.Hall/Heartbeat"
)

// HallClient is the client API for Hall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HallClient interface {
	// SayHello 方法
	UserInstead(ctx context.Context, in *UserInsteadRequest, opts ...grpc.CallOption) (*UserInsteadResponse, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (Hall_PushStreamClient, error)
	MustPush(ctx context.Context, in *MustPushRequest, opts ...grpc.CallOption) (*MustPushResponse, error)
	// 转发client消息
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Hall_ClientStreamClient, error)
	GateStream(ctx context.Context, opts ...grpc.CallOption) (Hall_GateStreamClient, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type hallClient struct {
	cc grpc.ClientConnInterface
}

func NewHallClient(cc grpc.ClientConnInterface) HallClient {
	return &hallClient{cc}
}

func (c *hallClient) UserInstead(ctx context.Context, in *UserInsteadRequest, opts ...grpc.CallOption) (*UserInsteadResponse, error) {
	out := new(UserInsteadResponse)
	err := c.cc.Invoke(ctx, Hall_UserInstead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (Hall_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hall_ServiceDesc.Streams[0], Hall_PushStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hallPushStreamClient{stream}
	return x, nil
}

type Hall_PushStreamClient interface {
	Send(*PushStreamRequest) error
	CloseAndRecv() (*PushStreamResponse, error)
	grpc.ClientStream
}

type hallPushStreamClient struct {
	grpc.ClientStream
}

func (x *hallPushStreamClient) Send(m *PushStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hallPushStreamClient) CloseAndRecv() (*PushStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hallClient) MustPush(ctx context.Context, in *MustPushRequest, opts ...grpc.CallOption) (*MustPushResponse, error) {
	out := new(MustPushResponse)
	err := c.cc.Invoke(ctx, Hall_MustPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Hall_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hall_ServiceDesc.Streams[1], Hall_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hallClientStreamClient{stream}
	return x, nil
}

type Hall_ClientStreamClient interface {
	Send(*ClientMessageRequest) error
	Recv() (*ClientMessageResponse, error)
	grpc.ClientStream
}

type hallClientStreamClient struct {
	grpc.ClientStream
}

func (x *hallClientStreamClient) Send(m *ClientMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hallClientStreamClient) Recv() (*ClientMessageResponse, error) {
	m := new(ClientMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hallClient) GateStream(ctx context.Context, opts ...grpc.CallOption) (Hall_GateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hall_ServiceDesc.Streams[2], Hall_GateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hallGateStreamClient{stream}
	return x, nil
}

type Hall_GateStreamClient interface {
	Send(*GateDataPush) error
	Recv() (*HallDataPush, error)
	grpc.ClientStream
}

type hallGateStreamClient struct {
	grpc.ClientStream
}

func (x *hallGateStreamClient) Send(m *GateDataPush) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hallGateStreamClient) Recv() (*HallDataPush, error) {
	m := new(HallDataPush)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hallClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Hall_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, Hall_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallServer is the server API for Hall service.
// All implementations must embed UnimplementedHallServer
// for forward compatibility
type HallServer interface {
	// SayHello 方法
	UserInstead(context.Context, *UserInsteadRequest) (*UserInsteadResponse, error)
	PushStream(Hall_PushStreamServer) error
	MustPush(context.Context, *MustPushRequest) (*MustPushResponse, error)
	// 转发client消息
	ClientStream(Hall_ClientStreamServer) error
	GateStream(Hall_GateStreamServer) error
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	mustEmbedUnimplementedHallServer()
}

// UnimplementedHallServer must be embedded to have forward compatible implementations.
type UnimplementedHallServer struct {
}

func (UnimplementedHallServer) UserInstead(context.Context, *UserInsteadRequest) (*UserInsteadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInstead not implemented")
}
func (UnimplementedHallServer) PushStream(Hall_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}
func (UnimplementedHallServer) MustPush(context.Context, *MustPushRequest) (*MustPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MustPush not implemented")
}
func (UnimplementedHallServer) ClientStream(Hall_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedHallServer) GateStream(Hall_GateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GateStream not implemented")
}
func (UnimplementedHallServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedHallServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHallServer) mustEmbedUnimplementedHallServer() {}

// UnsafeHallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HallServer will
// result in compilation errors.
type UnsafeHallServer interface {
	mustEmbedUnimplementedHallServer()
}

func RegisterHallServer(s grpc.ServiceRegistrar, srv HallServer) {
	s.RegisterService(&Hall_ServiceDesc, srv)
}

func _Hall_UserInstead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInsteadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServer).UserInstead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hall_UserInstead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServer).UserInstead(ctx, req.(*UserInsteadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hall_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HallServer).PushStream(&hallPushStreamServer{stream})
}

type Hall_PushStreamServer interface {
	SendAndClose(*PushStreamResponse) error
	Recv() (*PushStreamRequest, error)
	grpc.ServerStream
}

type hallPushStreamServer struct {
	grpc.ServerStream
}

func (x *hallPushStreamServer) SendAndClose(m *PushStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hallPushStreamServer) Recv() (*PushStreamRequest, error) {
	m := new(PushStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hall_MustPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MustPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServer).MustPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hall_MustPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServer).MustPush(ctx, req.(*MustPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hall_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HallServer).ClientStream(&hallClientStreamServer{stream})
}

type Hall_ClientStreamServer interface {
	Send(*ClientMessageResponse) error
	Recv() (*ClientMessageRequest, error)
	grpc.ServerStream
}

type hallClientStreamServer struct {
	grpc.ServerStream
}

func (x *hallClientStreamServer) Send(m *ClientMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hallClientStreamServer) Recv() (*ClientMessageRequest, error) {
	m := new(ClientMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hall_GateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HallServer).GateStream(&hallGateStreamServer{stream})
}

type Hall_GateStreamServer interface {
	Send(*HallDataPush) error
	Recv() (*GateDataPush, error)
	grpc.ServerStream
}

type hallGateStreamServer struct {
	grpc.ServerStream
}

func (x *hallGateStreamServer) Send(m *HallDataPush) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hallGateStreamServer) Recv() (*GateDataPush, error) {
	m := new(GateDataPush)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hall_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hall_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hall_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hall_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hall_ServiceDesc is the grpc.ServiceDesc for Hall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hall_grpc.Hall",
	HandlerType: (*HallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInstead",
			Handler:    _Hall_UserInstead_Handler,
		},
		{
			MethodName: "MustPush",
			Handler:    _Hall_MustPush_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Hall_Info_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Hall_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _Hall_PushStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Hall_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GateStream",
			Handler:       _Hall_GateStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "doc/grpc/hall.proto",
}
