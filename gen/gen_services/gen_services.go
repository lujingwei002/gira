package gen_services

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/lujingwei002/gira/log"

	"github.com/lujingwei002/gira/proj"
	"gopkg.in/yaml.v2"
)

var code = `
// Code generated by github.com/lujingwei002/gira. DO NOT EDIT.
// Code generated by github.com/lujingwei002/gira. DO NOT EDIT.
// Code generated by github.com/lujingwei002/gira. DO NOT EDIT.

package main 

import (
	"github.com/lujingwei002/gira/log"
	"github.com/lujingwei002/gira"
	gira_app "github.com/lujingwei002/gira/app"
	{{.ServiceName}}_app "{{.ModuleName}}/{{.ServiceName}}/app"
)

// 检查是否满足接口
var _ = (gira.ApplicationFacade)(&{{.ServiceName}}_app.Application{})
var _ = (gira.ResourceManager)(&{{.ServiceName}}_app.Application{})

func main() {
	app := {{.ServiceName}}_app.NewApplication()
	err := gira_app.Cli("{{.ServiceName}}", app)
	log.Info(err)
}

`

type services_file struct {
	Service []struct {
		Name     string `name`
		Resource string `resource`
	} `service`
}

type service_state struct {
	servicesFilePath string
	servicesFile     services_file
}

func capUpperString(s string) string {
	return strings.ToUpper(s[0:1]) + s[1:]
}

func genServices1(serviceState *service_state) error {
	if data, err := ioutil.ReadFile(serviceState.servicesFilePath); err != nil {
		return err
	} else {
		if err := yaml.Unmarshal(data, &serviceState.servicesFile); err != nil {
			return err
		}
	}
	return nil
}

func genServices2(serviceState *service_state) error {
	log.Info("生成go文件")
	for _, v := range serviceState.servicesFile.Service {
		sb := strings.Builder{}
		srcServicesDir := path.Join(proj.Config.SrcGenDir, "services", v.Name)
		if err := os.RemoveAll(srcServicesDir); err != nil {
			return err
		}
		if err := os.Mkdir(srcServicesDir, 0755); err != nil {
			return err
		}
		servicesPath := path.Join(srcServicesDir, fmt.Sprintf("%s.go", v.Name))
		file, err := os.OpenFile(servicesPath, os.O_WRONLY|os.O_CREATE, 0644)
		if err != nil {
			return err
		}
		file.Truncate(0)
		defer file.Close()

		tmpl, err := template.New("service").Parse(code)
		if err != nil {
			return err
		}
		params := map[string]string{
			"ModuleName":       proj.Config.Module,
			"ServiceName":      v.Name,
			"ServiceUpperName": capUpperString(v.Name),
		}
		// if err := tmpl.Execute(os.Stdout, params); err != nil {
		// 	return err
		// }
		if err := tmpl.Execute(&sb, params); err != nil {
			return err
		}
		file.WriteString(sb.String())
	}
	//
	// 		sb.WriteString(fmt.Sprintf(
	// 			`package main
	//
	// import (
	// 	"github.com/lujingwei002/gira/log"
	// 	"github.com/lujingwei002/gira"
	// 	"%s/%s"
	// 	"%s/gen/resources"
	// )
	//
	// // 检查是否满足接口
	// // var _ = (resources.I%sHandler)(&%s.Application{})
	//
	// func main() {
	// 	service := %s.NewService()
	// 	err := gira.Main("%s", service)
	// 	log.Info(err)
	// }`, state.ProjectConf.Module, v.Name, state.ProjectConf.Module, v.Name, capUpperString(v.Name), v.Name, v.Name))
	// 		file.WriteString(sb.String())
	// 		file.Close()
	// 	}
	return nil
}

func Gen() error {
	log.Info("===============gen service start.===============")
	// 初始化
	serviceState := &service_state{
		servicesFilePath: path.Join(proj.Config.DocDir, "services.yaml"),
	}
	if err := genServices1(serviceState); err != nil {
		log.Info(err)
		return err
	}
	if err := genServices2(serviceState); err != nil {
		log.Info(err)
		return err
	}
	log.Info("===============gen service finished===============")
	return nil
}
